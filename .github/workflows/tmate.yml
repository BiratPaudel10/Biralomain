name: Create VPS

on:
  repository_dispatch:
    types: [create-vps]

jobs:
  start-vps:
    runs-on: ubuntu-latest
    timeout-minutes: 360         # GitHub hard-limit (6 h)

    env:
      VPS_NAME: ${{ github.event.client_payload.vps_name }}

    steps:
      - name: ⬇️  Checkout repo
        uses: actions/checkout@v4

      - name: 📂 Ensure folders
        run: mkdir -p links .backup

      # ─────────── RESTORE ───────────
      - name: ♻️  Restore previous backup
        if: ${{ github.event.client_payload.backup == 'true' || github.event.client_payload.backup == true }}
        run: |
          if [ -f ".backup/${VPS_NAME}.zip" ]; then
            echo "Found backup, restoring..."
            unzip -qq ".backup/${VPS_NAME}.zip" -d .
          else
            echo "No backup for $VPS_NAME"
          fi

      # Or call your custom script if you prefer
      # - name: ♻️ Restore via script
      #   run: bash backup-restore.sh restore "$VPS_NAME"

      # ─────────── START TMATE ───────────
      - name: 🔑 Start tmate & wait ready
        uses: mxschmitt/action-tmate@v3
        with:
          limit-access-to-actor: true

      - name: 🔗 Save SSH link
        run: |
          SSH=$(tmate display -p '#{tmate_ssh}')
          echo "$SSH"
          echo "$SSH" > "links/${VPS_NAME}.txt"

      # ─────────── BACKUP ───────────
      - name: 💾 Zip workspace for backup
        run: |
          zip -r ".backup/${VPS_NAME}.zip" . -x ".git/*" ".github/*" ".backup/*" || true

      # Or call your custom script
      # - name: 💾 Backup via script
      #   run: bash backup-restore.sh backup "$VPS_NAME"

      # ─────────── COMMIT CHANGES ───────────
      - name: 📤 Commit SSH + backup
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "🔁 Update SSH + backup for ${VPS_NAME}"
          branch: main
